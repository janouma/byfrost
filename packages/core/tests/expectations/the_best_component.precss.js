/* tests/fixtures/the_best_component.svelte generated by Svelte v4.2.12 */
import {
	SvelteComponent,
	append,
	append_styles,
	attr,
	create_custom_element,
	detach,
	element,
	flush,
	init,
	insert,
	noop,
	not_equal,
	set_data,
	text
} from "svelte/internal";

import "svelte/internal/disclose-version";

function add_css(target) {
	append_styles(target, "svelte-1996oiy", "h1.svelte-1996oiy{font-size:2px}");
}

function create_fragment(ctx) {
	let h1;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			h1 = element("h1");
			t0 = text("The best Svelte component \"");
			t1 = text(/*name*/ ctx[0]);
			t2 = text("\" in the world");
			attr(h1, "class", "svelte-1996oiy");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			append(h1, t1);
			append(h1, t2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(h1);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name = 'Ze Component' } = $$props;

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name];
}

class The_best_component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, not_equal, { name: 0 }, add_css);
	}

	get name() {
		return this.$$.ctx[0];
	}

	set name(name) {
		this.$$set({ name });
		flush();
	}
}

customElements.define("the-best-component", create_custom_element(The_best_component, {"name":{}}, [], [], false));
export default The_best_component;